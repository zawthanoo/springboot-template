def POM_VERSION
def GIT_COMMIT_SHORT
def DOCKER_TAB_VERSION
def ARTIFACT_ID
def DOCKER_IMAGE_FULL_NAME

pipeline {
    tools {
        jdk 'temurin-17-jdk'
        maven 'maven-3.9.0'
    }

    agent any

    stages {
        stage('Clean Workspace') {
            steps {
                deleteDir()
            }
        }

        stage('Cloning Git') {
            steps {
                checkout scm
            }
        }

        stage('Initialize global variables') {
            steps {
                script {
                    def pom = readMavenPom file: 'pom.xml'
                    POM_VERSION = pom.version.replaceAll('-SNAPSHOT', '')
                    GIT_COMMIT_SHORT = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    DOCKER_TAB_VERSION = "${POM_VERSION}-${GIT_COMMIT_SHORT}-$BUILD_NUMBER"
                    ARTIFACT_ID = pom.artifactId
                    DOCKER_IMAGE_FULL_NAME = "$DOCKER_REPO/$DOCKER_REPO_ORG/${ARTIFACT_ID}:${DOCKER_TAB_VERSION}"

                    echo "ArtifactId: ${ARTIFACT_ID}, pom-version: ${POM_VERSION}"
                }
            }
        }

        stage('Build Java Package') {
            steps {
                script {
                    sh 'mvn -s jenkins/settings.xml dependency:go-offline'
                    sh "mvn versions:set -DnewVersion=${DOCKER_TAB_VERSION}"
                    sh 'mvn -s jenkins/settings.xml -DskipTests clean package'
                }
            }
        }

        stage('Build Docker Image With Extracted Jar') {
            steps {
                script {
                    sh 'cp target/*.jar jenkins/apps/'
                    sh 'mkdir -p jenkins/apps/extracted'
                    sh 'java -Djarmode=layertools -jar jenkins/apps/*.jar extract --destination jenkins/apps/extracted'

                    sh 'docker login -u $DOCKER_USER -p "$DOCKER_PASS" $DOCKER_REPO'
                    echo "Docker image full name: ${DOCKER_IMAGE_FULL_NAME}"
                    sh "docker build -t ${DOCKER_IMAGE_FULL_NAME} jenkins"
                    sh "docker push ${DOCKER_IMAGE_FULL_NAME}"
                    echo "Docker image built and pushed: ${DOCKER_IMAGE_FULL_NAME}"
                }
            }
        }
        stage('MS-Team Notificaiton') {
            steps {
              office365ConnectorSend webhookUrl: 'ms-team webhookUrl',
              message: "Docker image built and pushed: ${ARTIFACT_ID}:${DOCKER_TAB_VERSION}",
              status: 'Success',
              color: '#0000FF'
            }
        }

        stage('Clear Local Docker Image') {
            steps {
                script {
                    sh "docker rmi ${DOCKER_IMAGE_FULL_NAME}"
                    echo "Deleted local Docker image: ${DOCKER_IMAGE_FULL_NAME}"
                }
            }
        }
    }
}


maven settings.xml
------------------------
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                          https://maven.apache.org/xsd/settings-1.0.0.xsd">

<servers>
    <server>
      <id>nexus</id>
      <username>${NEXUS_REPO_USERNAME}</username>
      <password>${NEXUS_REPO_PASSWORD}</password>
    </server>
  </servers>
  <mirrors>
    <mirror>
      <!--This sends everything else to /public -->
      <id>nexus</id>
      <mirrorOf>*</mirrorOf>
      <url>${NEXUS_REPO_URL}/maven-public/</url>
    </mirror>
  </mirrors>
  <profiles>
    <profile>
      <id>nexus</id>
      <!--Enable snapshots for the built in central repo to direct -->
      <!--all requests to artifactory via the mirror -->
      <repositories>
        <repository>
          <id>central</id>
          <url>http://central</url>
          <releases><enabled>true</enabled></releases>
          <snapshots><enabled>true</enabled></snapshots>
        </repository>
      </repositories>
     <pluginRepositories>
        <pluginRepository>
          <id>central</id>
          <url>http://central</url>
          <releases><enabled>true</enabled></releases>
          <snapshots><enabled>true</enabled></snapshots>
        </pluginRepository>
      </pluginRepositories>
    </profile>
  </profiles>
  <activeProfiles>
    <!--make the profile active all the time -->
    <activeProfile>nexus</activeProfile>
  </activeProfiles>
</settings>
