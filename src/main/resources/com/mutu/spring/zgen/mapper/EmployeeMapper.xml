<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.mutu.spring.zgen.mapper.EmployeeMapper" >
  <resultMap id="BaseResultMap" type="com.mutu.spring.zgen.entity.Employee" >
    <id column="EMP_NO" property="empNo" jdbcType="VARCHAR" />
    <result column="FIRST_NAME" property="firstName" jdbcType="VARCHAR" />
    <result column="LAST_NAME" property="lastName" jdbcType="VARCHAR" />
    <result column="DOB" property="dob" jdbcType="DATE" />
    <result column="EMAIL" property="email" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    EMP_NO, FIRST_NAME, LAST_NAME, DOB, EMAIL
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.mutu.spring.zgen.entity.EmployeeExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from PUBLIC.EMPLOYEE
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from PUBLIC.EMPLOYEE
    where EMP_NO = #{empNo,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from PUBLIC.EMPLOYEE
    where EMP_NO = #{empNo,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.mutu.spring.zgen.entity.EmployeeExample" >
    delete from PUBLIC.EMPLOYEE
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.mutu.spring.zgen.entity.Employee" >
    insert into PUBLIC.EMPLOYEE (EMP_NO, FIRST_NAME, LAST_NAME, 
      DOB, EMAIL)
    values (#{empNo,jdbcType=VARCHAR}, #{firstName,jdbcType=VARCHAR}, #{lastName,jdbcType=VARCHAR}, 
      #{dob,jdbcType=DATE}, #{email,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.mutu.spring.zgen.entity.Employee" >
    insert into PUBLIC.EMPLOYEE
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="empNo != null" >
        EMP_NO,
      </if>
      <if test="firstName != null" >
        FIRST_NAME,
      </if>
      <if test="lastName != null" >
        LAST_NAME,
      </if>
      <if test="dob != null" >
        DOB,
      </if>
      <if test="email != null" >
        EMAIL,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="empNo != null" >
        #{empNo,jdbcType=VARCHAR},
      </if>
      <if test="firstName != null" >
        #{firstName,jdbcType=VARCHAR},
      </if>
      <if test="lastName != null" >
        #{lastName,jdbcType=VARCHAR},
      </if>
      <if test="dob != null" >
        #{dob,jdbcType=DATE},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.mutu.spring.zgen.entity.EmployeeExample" resultType="java.lang.Integer" >
    select count(*) from PUBLIC.EMPLOYEE
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update PUBLIC.EMPLOYEE
    <set >
      <if test="record.empNo != null" >
        EMP_NO = #{record.empNo,jdbcType=VARCHAR},
      </if>
      <if test="record.firstName != null" >
        FIRST_NAME = #{record.firstName,jdbcType=VARCHAR},
      </if>
      <if test="record.lastName != null" >
        LAST_NAME = #{record.lastName,jdbcType=VARCHAR},
      </if>
      <if test="record.dob != null" >
        DOB = #{record.dob,jdbcType=DATE},
      </if>
      <if test="record.email != null" >
        EMAIL = #{record.email,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update PUBLIC.EMPLOYEE
    set EMP_NO = #{record.empNo,jdbcType=VARCHAR},
      FIRST_NAME = #{record.firstName,jdbcType=VARCHAR},
      LAST_NAME = #{record.lastName,jdbcType=VARCHAR},
      DOB = #{record.dob,jdbcType=DATE},
      EMAIL = #{record.email,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.mutu.spring.zgen.entity.Employee" >
    update PUBLIC.EMPLOYEE
    <set >
      <if test="firstName != null" >
        FIRST_NAME = #{firstName,jdbcType=VARCHAR},
      </if>
      <if test="lastName != null" >
        LAST_NAME = #{lastName,jdbcType=VARCHAR},
      </if>
      <if test="dob != null" >
        DOB = #{dob,jdbcType=DATE},
      </if>
      <if test="email != null" >
        EMAIL = #{email,jdbcType=VARCHAR},
      </if>
    </set>
    where EMP_NO = #{empNo,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.mutu.spring.zgen.entity.Employee" >
    update PUBLIC.EMPLOYEE
    set FIRST_NAME = #{firstName,jdbcType=VARCHAR},
      LAST_NAME = #{lastName,jdbcType=VARCHAR},
      DOB = #{dob,jdbcType=DATE},
      EMAIL = #{email,jdbcType=VARCHAR}
    where EMP_NO = #{empNo,jdbcType=VARCHAR}
  </update>
  <select resultMap="BaseResultMap" parameterType="com.mutu.spring.zgen.entity.EmployeeExample" id="selectByExampleWithRowbounds" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from PUBLIC.EMPLOYEE
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
</mapper>